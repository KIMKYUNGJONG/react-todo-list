{"version":3,"sources":["components/PageTemplate/PageTemplate.js","components/TodoInput/TodoInput.js","components/TodoItem/TodoItem.js","components/TodoList/TodoList.js","components/App.js","serviceWorker.js","index.js"],"names":["cx","classNames","bind","styles","PageTemplate","children","className","TodoInput","value","onChange","onInsert","onKeyPress","e","key","onClick","TodoItem","nextProps","nextState","this","props","done","onToggle","onRemove","type","checked","readOnly","stopPropagation","Component","TodoList","todos","todoList","map","todo","id","text","initialTodos","Array","fill","foo","index","App","state","input","getId","handleChange","target","setState","handleInsert","newTodo","handleToggle","findIndex","toggled","slice","length","handleRemove","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.3a03116d.chunk.js","sourcesContent":["import React from 'react';\r\nimport styles from './PageTemplate.scss';\r\nimport classNames from 'classnames/bind';\r\n\r\nconst cx = classNames.bind(styles);\r\n\r\nconst PageTemplate = ({ children }) => {\r\n  return (\r\n    <div className={cx('page-template')}>\r\n      <h1>일정관리</h1>\r\n      <div className={cx('content')}>{children}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PageTemplate;\r\n","import React from 'react';\r\nimport styles from './TodoInput.scss';\r\nimport classNames from 'classnames/bind';\r\n\r\nconst cx = classNames.bind(styles);\r\n\r\nconst TodoInput = ({ value, onChange, onInsert }) => {\r\n  const handleKeyPress = e => {\r\n    if (e.key === 'Enter') {\r\n      onInsert();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={cx('todo-input')}>\r\n      <input onChange={onChange} value={value} onKeyPress={handleKeyPress} />\r\n      <div className={cx('add-button')} onClick={onInsert}>\r\n        추가\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TodoInput;\r\n","import React, { Component } from 'react';\r\nimport styles from './TodoItem.scss';\r\nimport classNames from 'classnames/bind';\r\n\r\nconst cx = classNames.bind(styles);\r\n\r\nclass TodoItem extends Component {\r\n  shouldComponentUpdate(nextProps, nextState) {\r\n    return this.props.done !== nextProps.done;\r\n  }\r\n  render() {\r\n    const { done, children, onToggle, onRemove } = this.props;\r\n\r\n    return (\r\n      <div className={cx('todo-item')} onClick={onToggle}>\r\n        <input className={cx('tick')} type=\"checkbox\" checked={done} readOnly />\r\n        <div className={cx('text', { done })}>{children}</div>\r\n        <div\r\n          className={cx('delete')}\r\n          onClick={e => {\r\n            onRemove();\r\n            e.stopPropagation();\r\n          }}>\r\n          [지우기]\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TodoItem;\r\n","import React, { Component } from 'react';\r\nimport TodoItem from '../TodoItem';\r\n\r\nclass TodoList extends Component {\r\n  shouldComponentUpdate(nextProps, nextState) {\r\n    return this.props.todos !== nextProps.todos;\r\n  }\r\n\r\n  render() {\r\n    const { todos, onToggle, onRemove } = this.props;\r\n    const todoList = todos.map(todo => (\r\n      <TodoItem\r\n        key={todo.id}\r\n        done={todo.done}\r\n        onToggle={() => onToggle(todo.id)}\r\n        onRemove={() => onRemove(todo.id)}>\r\n        {todo.text}\r\n      </TodoItem>\r\n    ));\r\n\r\n    return <div>{todoList}</div>;\r\n  }\r\n}\r\n\r\nexport default TodoList;\r\n","import React, { Component } from 'react';\r\nimport PageTemplate from './PageTemplate';\r\nimport TodoInput from './TodoInput';\r\nimport TodoList from './TodoList';\r\n\r\nconst initialTodos = new Array(10)\r\n  .fill(0)\r\n  .map((foo, index) => ({ id: index, text: `일정 ${index}`, done: false }));\r\n\r\nclass App extends Component {\r\n  state = {\r\n    input: '',\r\n    todos: initialTodos\r\n  };\r\n\r\n  getId = () => {\r\n    return ++this.id;\r\n  };\r\n  id = 1;\r\n\r\n  handleChange = e => {\r\n    const { value } = e.target;\r\n    this.setState({\r\n      input: value\r\n    });\r\n  };\r\n  handleInsert = () => {\r\n    const { todos, input } = this.state;\r\n    const newTodo = {\r\n      text: input,\r\n      done: false,\r\n      id: this.getId()\r\n    };\r\n    this.setState({\r\n      todos: [...todos, newTodo],\r\n      input: ''\r\n    });\r\n  };\r\n  handleToggle = id => {\r\n    const { todos } = this.state;\r\n    //findIndex로 todos배열에서 id 인자와 일치하는 todo의 인덱스를 변수로 설정한다.\r\n    const index = todos.findIndex(todo => todo.id === id);\r\n    // todos배열에 선택한 index값을 가진 배열 요소의 done값을 반전 시킨다.\r\n    const toggled = {\r\n      ...todos[index],\r\n      done: !todos[index].done\r\n    };\r\n    // todos 배열에서 변경될 요소의 앞, 뒤를 슬라이스하고 변경된 값을 입력한다.\r\n    this.setState({\r\n      todos: [\r\n        ...todos.slice(0, index),\r\n        toggled,\r\n        ...todos.slice(index + 1, todos.length)\r\n      ]\r\n    });\r\n  };\r\n  handleRemove = id => {\r\n    const { todos } = this.state;\r\n    const index = todos.findIndex(todo => todo.id === id);\r\n    this.setState({\r\n      todos: [...todos.slice(0, index), ...todos.slice(index + 1, todos.length)]\r\n    });\r\n  };\r\n  render() {\r\n    const { input, todos } = this.state;\r\n    const { handleChange, handleInsert, handleToggle, handleRemove } = this;\r\n    return (\r\n      <PageTemplate>\r\n        <TodoInput\r\n          onChange={handleChange}\r\n          onInsert={handleInsert}\r\n          value={input}\r\n        />\r\n        <TodoList\r\n          todos={todos}\r\n          onToggle={handleToggle}\r\n          onRemove={handleRemove}\r\n        />\r\n      </PageTemplate>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './styles/main.scss';\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\nserviceWorker.register();\r\n"],"sourceRoot":""}